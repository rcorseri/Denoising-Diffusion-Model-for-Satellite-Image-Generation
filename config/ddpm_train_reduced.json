{
    "name": "TEST",
    "phase": "train", // train (train+val) or test
    "distributed": false,
    "gpu_ids": [
    ],
    "path": { //set the path
        "log": "logs",
        "tb_logger": "tb_logger",
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": null
        //"resume_state": "experiments/TEST/A"
    },
    "datasets": {
        "train": {
            "name": "TEST", // Options: "LEVIR-WHU-DSIFN", "Million-AID"
            "dataroot":"datasets/LEVIR-CD256/A", //LEVIR-CD256/", // Options: "dataset/LEVIR-WHU-DSIFN", "dataset/Million-AID"
            "resolution": 256, // high resolution
            "batch_size": 4,
            "num_workers": 4,
            "use_shuffle": true,
            "data_len": -1 // -1 represents all data used in train
        },
        "val": {
            "name": "TEST", // Options: "LEVIR-CD-256", "Million-AID"
            "resolution": 256,
            "data_len": 10
        }
    },
    "model": {
        "which_model_G": "sr3", // use the ddpm or sr3 network structure
        "finetune_norm": false,
        "unet": {
            "in_channel": 3,
            "out_channel": 3,
            "inner_channel": 64,
            "channel_multiplier": [1],
            "attn_res": [0],
            "res_blocks": 0,
            "dropout": 0
        },
        "beta_schedule": { // use munual beta_schedule for acceleration
            "train": {
                "schedule": "cosine",
                "n_timestep": 2000,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            },
            "val": {
                "schedule": "cosine",
                "n_timestep": 2000,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            }
        },
        "diffusion": {
            "image_size": 256,
            "channels": 3, //sample channel
            "loss": "l2", //options "l1" or "l2"
            "conditional": false // unconditional generation or unconditional generation(super_resolution)
        }
    },
    "train": {
        "n_iter": 1000000,
        "val_freq": 1e4,
        "save_checkpoint_freq": 1e4,
        "print_freq": 100,
        "optimizer": {
            "type": "adamw",
            "lr": 1e-5
        },
        "ema_scheduler": { // not used now
            "step_start_ema": 5000,
            "update_ema_every": 1,
            "ema_decay": 0.9999
        }
    },
    "wandb": {
        "project": "TEST"
    }
}
