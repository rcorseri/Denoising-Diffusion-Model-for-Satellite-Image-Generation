24-05-22 15:58:16.722 - INFO:   name: LEVIR_train
  phase: train
  distributed: False
  gpu_ids: [0]
  path:[
    log: experiments/LEVIR_train_240522_155816/logs
    tb_logger: experiments/LEVIR_train_240522_155816/tb_logger
    results: experiments/LEVIR_train_240522_155816/results
    checkpoint: experiments/LEVIR_train_240522_155816/checkpoint
    resume_state: None
    experiments_root: experiments/LEVIR_train_240522_155816
  ]
  datasets:[
    train:[
      name: TEST
      dataroot: datasets/LEVIR-CD256/A
      resolution: 256
      batch_size: 16
      num_workers: 4
      use_shuffle: True
      data_len: 1000
    ]
    val:[
      name: TEST
      resolution: 256
      data_len: 2
    ]
  ]
  model:[
    which_model_G: sr3
    finetune_norm: False
    unet:[
      in_channel: 3
      out_channel: 3
      inner_channel: 64
      channel_multiplier: [1, 2, 4, 8]
      attn_res: [16]
      res_blocks: 2
      dropout: 0.2
    ]
    beta_schedule:[
      train:[
        schedule: linear
        n_timestep: 2000
        linear_start: 1e-06
        linear_end: 0.01
      ]
      val:[
        schedule: linear
        n_timestep: 2000
        linear_start: 1e-06
        linear_end: 0.01
      ]
    ]
    diffusion:[
      image_size: 256
      channels: 3
      loss: l2
      conditional: False
    ]
  ]
  train:[
    n_iter: 1000000
    val_freq: 100
    save_checkpoint_freq: 200
    print_freq: 10
    optimizer:[
      type: adamw
      lr: 0.0002
    ]
    ema_scheduler:[
      step_start_ema: 5000
      update_ema_every: 1
      ema_decay: 0.9999
    ]
  ]
  wandb:[
    project: TEST
  ]
  log_eval: True
  enable_wandb: False

24-05-22 15:58:17.971 - INFO: Dataset [ImageDataset - TEST] is created.
24-05-22 15:58:17.971 - INFO: Initial Dataset Finished
24-05-22 15:58:18.858 - INFO: Initialization method [orthogonal]
24-05-22 15:58:21.405 - INFO: Network G structure: GaussianDiffusion, with parameters: 55,405,507
24-05-22 15:58:21.405 - INFO: GaussianDiffusion(
  (denoise_fn): UNet(
    (noise_level_mlp): Sequential(
      (0): PositionalEncoding()
      (1): Linear(in_features=64, out_features=256, bias=True)
      (2): Swish()
      (3): Linear(in_features=256, out_features=64, bias=True)
    )
    (init_conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (downs): ModuleList(
      (0-1): 2 x ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (2): Downsample(
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (3): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (5): Downsample(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (6): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (7): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (8): Downsample(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (9): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (mid): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
          (qkv): Conv2d(512, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (ups): ModuleList(
      (0-1): 2 x ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 768, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (3): Upsample(
        (up): Upsample(scale_factor=2.0, mode='nearest')
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 768, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (6): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (7): Upsample(
        (up): Upsample(scale_factor=2.0, mode='nearest')
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (9): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (11): Upsample(
        (up): Upsample(scale_factor=2.0, mode='nearest')
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (12): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (13-14): 2 x ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (final_conv): Block(
      (block): Sequential(
        (0): GroupNorm(32, 64, eps=1e-05, affine=True)
        (1): Swish()
        (2): Identity()
        (3): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (loss_func): MSELoss()
)
24-05-22 15:58:21.408 - INFO: Model [DDPM] is created.
24-05-22 15:58:21.408 - INFO: Initial Model Finished
24-05-22 16:02:32.839 - INFO: <epoch:  1, iter:      10> l_pix: 6.6878e-01 
24-05-22 16:06:43.682 - INFO: <epoch:  1, iter:      20> l_pix: 1.1032e+00 
24-05-22 16:10:51.969 - INFO: <epoch:  1, iter:      30> l_pix: 1.2886e-01 
24-05-22 16:15:00.878 - INFO: <epoch:  1, iter:      40> l_pix: 9.7727e-02 
24-05-22 16:19:09.894 - INFO: <epoch:  1, iter:      50> l_pix: 1.1643e-01 
24-05-22 16:23:19.402 - INFO: <epoch:  1, iter:      60> l_pix: 9.0282e-02 
24-05-22 16:27:19.879 - INFO: <epoch:  2, iter:      70> l_pix: 6.9043e-02 
24-05-22 16:31:30.315 - INFO: <epoch:  2, iter:      80> l_pix: 6.6564e-02 
24-05-22 16:35:40.098 - INFO: <epoch:  2, iter:      90> l_pix: 7.0357e-02 
24-05-22 16:39:48.586 - INFO: <epoch:  2, iter:     100> l_pix: 6.0497e-02 
24-05-22 17:03:20.503 - INFO: <epoch:  2, iter:     100> Sample generation completed.
24-05-22 17:07:28.277 - INFO: <epoch:  2, iter:     110> l_pix: 5.6224e-02 
24-05-22 17:11:36.264 - INFO: <epoch:  2, iter:     120> l_pix: 8.4753e-02 
24-05-22 17:15:35.195 - INFO: <epoch:  3, iter:     130> l_pix: 6.2287e-02 
24-05-22 17:19:44.859 - INFO: <epoch:  3, iter:     140> l_pix: 4.2385e-02 
24-05-22 17:23:52.994 - INFO: <epoch:  3, iter:     150> l_pix: 4.4026e-02 
24-05-22 17:28:01.560 - INFO: <epoch:  3, iter:     160> l_pix: 6.7637e-02 
24-05-22 17:32:10.360 - INFO: <epoch:  3, iter:     170> l_pix: 4.0542e-02 
24-05-22 17:36:20.506 - INFO: <epoch:  3, iter:     180> l_pix: 3.9366e-02 
24-05-22 17:40:19.701 - INFO: <epoch:  4, iter:     190> l_pix: 6.2956e-02 
24-05-22 17:44:29.876 - INFO: <epoch:  4, iter:     200> l_pix: 5.0402e-02 
24-05-22 18:08:01.821 - INFO: <epoch:  4, iter:     200> Sample generation completed.
24-05-22 18:08:01.822 - INFO: Saving models and training states.
24-05-22 18:08:02.747 - INFO: Saved model in [experiments/LEVIR_train_240522_155816/checkpoint/I200_E4_gen.pth] ...
24-05-22 18:12:11.246 - INFO: <epoch:  4, iter:     210> l_pix: 3.5348e-02 
24-05-22 18:16:20.105 - INFO: <epoch:  4, iter:     220> l_pix: 3.6305e-02 
24-05-22 18:20:29.892 - INFO: <epoch:  4, iter:     230> l_pix: 9.8812e-02 
24-05-22 18:24:39.134 - INFO: <epoch:  4, iter:     240> l_pix: 4.9366e-02 
24-05-22 18:28:47.671 - INFO: <epoch:  4, iter:     250> l_pix: 4.3174e-02 
24-05-22 18:32:49.566 - INFO: <epoch:  5, iter:     260> l_pix: 1.1842e-01 
24-05-22 18:36:58.130 - INFO: <epoch:  5, iter:     270> l_pix: 3.9339e-02 
24-05-22 18:41:07.182 - INFO: <epoch:  5, iter:     280> l_pix: 2.9315e-02 
24-05-22 18:45:16.301 - INFO: <epoch:  5, iter:     290> l_pix: 2.8045e-02 
24-05-22 18:49:25.691 - INFO: <epoch:  5, iter:     300> l_pix: 3.2769e-02 
24-05-22 19:14:05.033 - INFO: <epoch:  5, iter:     300> Sample generation completed.
24-05-22 19:18:16.361 - INFO: <epoch:  5, iter:     310> l_pix: 5.7810e-02 
24-05-22 19:22:16.616 - INFO: <epoch:  6, iter:     320> l_pix: 2.6453e-02 
24-05-22 19:26:25.977 - INFO: <epoch:  6, iter:     330> l_pix: 2.8881e-02 
24-05-22 19:30:34.535 - INFO: <epoch:  6, iter:     340> l_pix: 2.2348e-01 
24-05-22 19:34:43.042 - INFO: <epoch:  6, iter:     350> l_pix: 2.4180e-02 
24-05-22 19:38:51.437 - INFO: <epoch:  6, iter:     360> l_pix: 5.9280e-02 
24-05-22 19:43:00.384 - INFO: <epoch:  6, iter:     370> l_pix: 1.8007e-01 
24-05-22 19:46:59.145 - INFO: <epoch:  7, iter:     380> l_pix: 2.0937e-01 
24-05-22 19:51:09.317 - INFO: <epoch:  7, iter:     390> l_pix: 5.8345e-02 
24-05-22 19:55:19.996 - INFO: <epoch:  7, iter:     400> l_pix: 3.0975e-02 
24-05-22 20:19:05.408 - INFO: <epoch:  7, iter:     400> Sample generation completed.
24-05-22 20:19:05.408 - INFO: Saving models and training states.
24-05-22 20:19:06.319 - INFO: Saved model in [experiments/LEVIR_train_240522_155816/checkpoint/I400_E7_gen.pth] ...
24-05-22 20:23:15.763 - INFO: <epoch:  7, iter:     410> l_pix: 2.5036e-02 
24-05-22 20:27:23.547 - INFO: <epoch:  7, iter:     420> l_pix: 9.1428e-02 
24-05-22 20:31:31.549 - INFO: <epoch:  7, iter:     430> l_pix: 2.4317e-02 
24-05-22 20:35:39.462 - INFO: <epoch:  7, iter:     440> l_pix: 1.0432e+00 
24-05-22 20:39:40.256 - INFO: <epoch:  8, iter:     450> l_pix: 2.6450e-02 
24-05-22 20:43:50.857 - INFO: <epoch:  8, iter:     460> l_pix: 2.4930e-02 
24-05-22 20:48:01.760 - INFO: <epoch:  8, iter:     470> l_pix: 2.3556e-02 
24-05-22 20:52:11.803 - INFO: <epoch:  8, iter:     480> l_pix: 8.8570e-02 
24-05-22 20:56:22.170 - INFO: <epoch:  8, iter:     490> l_pix: 9.9697e-02 
24-05-22 21:00:31.763 - INFO: <epoch:  8, iter:     500> l_pix: 7.3948e-02 
